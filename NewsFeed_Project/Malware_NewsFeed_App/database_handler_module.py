

import psycopg2  # postgresql


class ClassThreatDatabase:
    def __init__(this):
        try:
            this.db_connect = psycopg2.connect(host='localhost', user='postgres', password='hemmeligt', port=5432,
                                               dbname="threat_db")
            this.cur = this.db_connect.cursor()
        except:
            print("*" * 50, "No DB connection !", "*" * 50)
        return None

    def funcCreateTable(obj):
        create_table_if_not = """create table if not exists threat_table 
                    (date varchar(40), name varchar(128), 
                    description varchar(4096), malware varchar(1024), ref varchar(2048));"""

        create_table = """create table threat_table 
                            (date varchar(40), name varchar(128), 
                            description varchar(4096), malware varchar(1024), ref varchar(2048));"""
        try:
            obj.cur.execute("drop table if exists threat_table")
            obj.db_connect.commit()
            obj.cur.execute(create_table)
            obj.db_connect.commit()
        except:
            print("Creating table failed")

    def funcDatabaseWrite(obj, list_of_inner_tuples_arg=None):
        insert_into_threat_table = """insert into threat_table 
        (date, name, description, malware, ref) values (%s, %s, %s, %s, %s)"""

        insert_where_not_exists = """insert into threat_table (date, name, description, malware, ref) select
        %s, %s, %s, %s, %s where
        not exists (select date from threat_table where date = %s);"""
        try:

            for tuple_x in list_of_inner_tuples_arg:
                print(tuple_x[0])
                obj.cur.execute(insert_into_threat_table, tuple_x)
                obj.cur.execute("delete from threat_table where date=%s", tuple_x[0])
                obj.db_connect.commit()
        except:
            print("*" * 50, "Insert into threat_table failed !", "*" * 50)

    def funcDatabaseClose(obj):
        try:
            obj.cur.close()
            obj.db_connect.close()
        except Exception as error:
            print(error)


#######################################################################################

